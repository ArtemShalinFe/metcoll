{"Issues":[{"FromLinter":"prealloc","Text":"Consider pre-allocating `checks`","Severity":"error","SourceLines":["\tvar checks []*analysis.Analyzer"],"Replacement":null,"Pos":{"Filename":"cmd/staticlint/main.go","Offset":2606,"Line":54,"Column":2},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func (*compress/gzip.Reader).Read(p []byte) (n int, err error)","Severity":"error","SourceLines":["\treturn c.zipR.Read(p)"],"Replacement":null,"Pos":{"Filename":"internal/compress/gzip_reader.go","Offset":515,"Line":29,"Column":9},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func (*compress/gzip.Writer).Write(p []byte) (int, error)","Severity":"error","SourceLines":["\treturn c.zipW.Write(p)"],"Replacement":null,"Pos":{"Filename":"internal/compress/gzip_writer.go","Offset":434,"Line":24,"Column":9},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `readFromENV() error = %v, wantErr %v` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\tt.Errorf(\"readFromENV() error = %v, wantErr %v\", err, tt.wantErr)"],"Replacement":null,"Pos":{"Filename":"internal/configuration/configuration_agent_test.go","Offset":2534,"Line":120,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `readFromENV() = %v, want %v` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\tt.Errorf(\"readFromENV() = %v, want %v\", got.Server, tt.want.Server)"],"Replacement":null,"Pos":{"Filename":"internal/configuration/configuration_agent_test.go","Offset":2673,"Line":124,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"nilnil","Text":"return both the `nil` error and invalid value: use a sentinel error instead","Severity":"error","SourceLines":["\treturn nil, nil"],"Replacement":null,"Pos":{"Filename":"internal/exitchecker/exitchecker.go","Offset":1034,"Line":51,"Column":2},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `one` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\tbodyMetrics = append(bodyMetrics, metrics.NewCounterMetric(\"one\", 1))"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":8909,"Line":353,"Column":61},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `two` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\tbodyMetrics = append(bodyMetrics, metrics.NewCounterMetric(\"two\", 2))"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":8980,"Line":354,"Column":61},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `three dot one` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\tbodyMetrics = append(bodyMetrics, metrics.NewGaugeMetric(\"three dot one\", 3.1))"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":9049,"Line":355,"Column":59},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `four dot two` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\tbodyMetrics = append(bodyMetrics, metrics.NewGaugeMetric(\"four dot two\", 4.2))"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":9130,"Line":356,"Column":59},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `%s URL: %s` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tassert.Equal(t, v.status, resp.StatusCode, fmt.Sprintf(\"%s URL: %s\", v.name, v.url))"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":9874,"Line":390,"Column":58},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `cannot init zap-logger err: %v` has 3 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tfmt.Printf(\"cannot init zap-logger err: %v\", err)"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":13265,"Line":542,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `cannot init logger err: %v` has 3 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tfmt.Printf(\"cannot init logger err: %v\", err)"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":13410,"Line":549,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `marashal err: %v` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\tfmt.Printf(\"marashal err: %v\", err)"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":14271,"Line":593,"Column":15},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"lll","Text":"line is 122 characters","Severity":"error","SourceLines":["func testRequest(t *testing.T, ts *httptest.Server, method string, path string, body io.Reader) (*http.Response, []byte) {"],"Replacement":null,"Pos":{"Filename":"internal/handlers/handlers_test.go","Offset":0,"Line":672,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"whitespace","Text":"unnecessary leading newline","Severity":"error","SourceLines":["\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",""],"Replacement":{"NeedOnlyDelete":false,"NewLines":["\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"],"Inline":null},"LineRange":{"From":27,"To":28},"Pos":{"Filename":"internal/logger/app_logger.go","Offset":0,"Line":27,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (net/http.ResponseWriter).Write([]byte) (int, error)","Severity":"error","SourceLines":["\t\treturn 0, err"],"Replacement":null,"Pos":{"Filename":"internal/logger/response_data.go","Offset":611,"Line":27,"Column":13},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\tretryClient.RetryWaitMin = time.Duration(defautMinWaitRetry)"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/client.go","Offset":1112,"Line":48,"Column":42},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\tretryClient.RetryWaitMax = time.Duration(defautMaxWaitRetry)"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/client.go","Offset":1174,"Line":49,"Column":42},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `an occured error when getting public key bytes, err: %w` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\treturn nil, fmt.Errorf(\"an occured error when getting public key bytes, err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/client.go","Offset":1420,"Line":57,"Column":27},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\t\th := hmac.New(sha256.New, []byte(c.hashkey))"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/client.go","Offset":3137,"Line":128,"Column":35},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `%x` has 3 occurrences, make it a constant","Severity":"error","SourceLines":["\t\treq.Header.Set(HashSHA256, fmt.Sprintf(\"%x\", h.Sum(nil)))"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/client.go","Offset":3209,"Line":132,"Column":42},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `HashSHA256` has 2 occurrences, but such constant `HashSHA256` already exists","Severity":"error","SourceLines":["\t\tbodyHash := r.Header.Get(\"HashSHA256\")"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/server.go","Offset":2095,"Line":91,"Column":28},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\t\thash := hmac.New(sha256.New, []byte(s.hashkey))"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/server.go","Offset":2406,"Line":106,"Column":38},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (net/http.ResponseWriter).Write([]byte) (int, error)","Severity":"error","SourceLines":["\treturn r.ResponseWriter.Write(b)"],"Replacement":null,"Pos":{"Filename":"internal/metcoll/server.go","Offset":3464,"Line":153,"Column":9},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func strconv.ParseFloat(s string, bitSize int) (float64, error)","Severity":"error","SourceLines":["\t\t\treturn nil, err"],"Replacement":null,"Pos":{"Filename":"internal/metrics/metrics.go","Offset":1799,"Line":63,"Column":16},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)","Severity":"error","SourceLines":["\t\t\treturn nil, err"],"Replacement":null,"Pos":{"Filename":"internal/metrics/metrics.go","Offset":1961,"Line":69,"Column":16},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"prealloc","Text":"Consider pre-allocating `ums`","Severity":"error","SourceLines":["\tvar ums []*Metrics"],"Replacement":null,"Pos":{"Filename":"internal/metrics/metrics.go","Offset":3841,"Line":151,"Column":2},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"errcheck","Text":"Error return value of `m.Get` is not checked","Severity":"error","SourceLines":["\t\tm.Get(ctx, s)"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":2987,"Line":130,"Column":8},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"errcheck","Text":"Error return value of `m.Get` is not checked","Severity":"error","SourceLines":["\t\tm.Get(ctx, s)"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":3141,"Line":137,"Column":8},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\t\treturn float64(s.memStats.GCCPUFraction), nil"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":3619,"Line":158,"Column":17},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func github.com/shirou/gopsutil/mem.VirtualMemory() (*github.com/shirou/gopsutil/mem.VirtualMemoryStat, error)","Severity":"error","SourceLines":["\t\t\treturn 0, err"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":5295,"Line":216,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from external package is unwrapped: sig: func github.com/shirou/gopsutil/cpu.Info() ([]github.com/shirou/gopsutil/cpu.InfoStat, error)","Severity":"error","SourceLines":["\t\t\treturn 0, err"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":5411,"Line":222,"Column":14},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unconvert","Text":"unnecessary conversion","Severity":"error","SourceLines":["\t\t\treturn float64(c[0].Mhz), nil"],"Replacement":null,"Pos":{"Filename":"internal/stats/stats.go","Offset":5455,"Line":226,"Column":18},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `transaction cannot be rolled back err: %w` has 9 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\treturn fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":1867,"Line":79,"Column":22},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `unable to start transaction err: %w` has 8 occurrences, make it a constant","Severity":"error","SourceLines":["\t\treturn 0, fmt.Errorf(\"unable to start transaction err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":2102,"Line":90,"Column":24},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `query %s \n\n execute error: %w` has 6 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\treturn 0, fmt.Errorf(\"query %s \\n\\n execute error: %w\", q, err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":2466,"Line":104,"Column":26},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"152-185 lines are duplicate of `internal/storage/database_storage.go:187-220`","Severity":"error","SourceLines":["func (db *DB) AddInt64Value(ctx context.Context, key string, value int64) (int64, error) {","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn 0, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tval, err := func() (int64, error) {","\t\tq := `","\t\tINSERT ","\t\t\tINTO counters (id, value) ","\t\t\tVALUES ($1, $2)","\t\tON CONFLICT (id) ","\t\t\tDO UPDATE SET value = EXCLUDED.value + counters.value","\t\tRETURNING value`","","\t\tval, err := retryQueryRowInt64(ctx, tx, q, key, value)","\t\tif err != nil {","\t\t\treturn 0, fmt.Errorf(\"query %s \\n\\n execute error: %w\", q, err)","\t\t}","\t\treturn val, nil","\t}()","","\tif err != nil {","\t\tif err = retryRollback(ctx, tx); err != nil {","\t\t\treturn 0, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn 0, err","\t}","","\treturn val, err","}"],"Replacement":null,"LineRange":{"From":152,"To":185},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":152,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"187-220 lines are duplicate of `internal/storage/database_storage.go:152-185`","Severity":"error","SourceLines":["func (db *DB) SetFloat64Value(ctx context.Context, key string, value float64) (float64, error) {","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn 0, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tval, err := func() (float64, error) {","\t\tq := `","\t\tINSERT ","\t\t\tINTO gauges (id, delta) ","\t\t\tVALUES ($1, $2)","\t\tON CONFLICT (id) ","\t\t\tDO UPDATE SET delta = $2","\t\tRETURNING delta`","","\t\tval, err := retryQueryRowFloat64(ctx, tx, q, key, value)","\t\tif err != nil {","\t\t\treturn 0, fmt.Errorf(\"query %s \\n\\n execute error: %w\", q, err)","\t\t}","\t\treturn val, nil","\t}()","","\tif err != nil {","\t\tif err = retryRollback(ctx, tx); err != nil {","\t\t\treturn 0, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn 0, err","\t}","","\treturn val, nil","}"],"Replacement":null,"LineRange":{"From":187,"To":220},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":187,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"222-278 lines are duplicate of `internal/storage/database_storage.go:280-335`","Severity":"error","SourceLines":["func (db *DB) BatchSetFloat64Value(ctx context.Context,","\tgauges map[string]float64) (map[string]float64, []error, error) {","\tvar errs []error","","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn nil, errs, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tupdated, errs, err := func() (map[string]float64, []error, error) {","\t\tbatch := \u0026pgx.Batch{}","","\t\tsqlStatement := `","\t\tINSERT ","\t\t\tINTO gauges (id, delta) ","\t\t\tVALUES ($1, $2)","\t\tON CONFLICT (id) ","\t\t\tDO UPDATE SET delta = $2","\t\tRETURNING id, delta`","","\t\tidMap := make(map[int]string)","\t\tfor gauge, delta := range gauges {","\t\t\tbatch.Queue(sqlStatement, gauge, delta)","\t\t\tidMap[batch.Len()-1] = gauge","\t\t}","","\t\tresults := tx.SendBatch(ctx, batch)","","\t\tupdated := make(map[string]float64)","\t\tfor i := 0; i \u003c len(gauges); i++ {","\t\t\tid, val, err := retryBatchResultQueryRowFloat64(ctx, results)","\t\t\tif err != nil {","\t\t\t\terrs = append(errs, fmt.Errorf(\"metric %s update error\", idMap[i]))","\t\t\t}","","\t\t\tupdated[id] = val","\t\t}","","\t\tif err = results.Close(); err != nil {","\t\t\treturn nil, errs, fmt.Errorf(\"batch update err: %w\", err)","\t\t}","","\t\treturn updated, errs, err","\t}()","","\tif err != nil {","\t\tif err = retryRollback(ctx, tx); err != nil {","\t\t\treturn nil, nil, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn nil, nil, err","\t}","","\treturn updated, errs, nil","}"],"Replacement":null,"LineRange":{"From":222,"To":278},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":222,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `metric %s update error` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\terrs = append(errs, fmt.Errorf(\"metric %s update error\", idMap[i]))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":6120,"Line":257,"Column":36},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `batch update err: %w` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\treturn nil, errs, fmt.Errorf(\"batch update err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":6262,"Line":264,"Column":33},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.BatchResults).Close() error","Severity":"error","SourceLines":["\t\treturn updated, errs, err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":6320,"Line":267,"Column":25},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"280-335 lines are duplicate of `internal/storage/database_storage.go:222-278`","Severity":"error","SourceLines":["func (db *DB) BatchAddInt64Value(ctx context.Context,","\tcounters map[string]int64) (map[string]int64, []error, error) {","\tvar errs []error","","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn nil, errs, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tupdated, errs, err := func() (map[string]int64, []error, error) {","\t\tbatch := \u0026pgx.Batch{}","","\t\tsqlStatement := `","\t\tINSERT ","\t\t\tINTO counters (id, value) ","\t\t\tVALUES ($1, $2)","\t\tON CONFLICT (id) ","\t\t\tDO UPDATE SET value = EXCLUDED.value + counters.value","\t\tRETURNING id, value`","","\t\tidMap := make(map[int]string)","\t\tfor counter, value := range counters {","\t\t\tbatch.Queue(sqlStatement, counter, value)","\t\t\tidMap[batch.Len()-1] = counter","\t\t}","","\t\tresults := tx.SendBatch(ctx, batch)","","\t\tupdated := make(map[string]int64)","\t\tfor i := 0; i \u003c len(counters); i++ {","\t\t\tid, val, err := retryBatchResultQueryRowInt64(ctx, results)","\t\t\tif err != nil {","\t\t\t\terrs = append(errs, fmt.Errorf(\"metric %s update error\", idMap[i]))","\t\t\t}","","\t\t\tupdated[id] = val","\t\t}","\t\tif err = results.Close(); err != nil {","\t\t\treturn nil, errs, fmt.Errorf(\"batch update err: %w\", err)","\t\t}","","\t\treturn updated, errs, nil","\t}()","","\tif err != nil {","\t\tif err := retryRollback(ctx, tx); err != nil {","\t\t\treturn nil, nil, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn nil, nil, err","\t}","","\treturn updated, errs, nil","}"],"Replacement":null,"LineRange":{"From":280,"To":335},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":280,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.BatchResults).Close() error","Severity":"error","SourceLines":["\t\treturn nil, nil, err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":7902,"Line":331,"Column":20},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"337-383 lines are duplicate of `internal/storage/database_storage.go:385-430`","Severity":"error","SourceLines":["func (db *DB) getAllDataInt64(ctx context.Context) (map[string]int64, error) {","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn nil, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tdataInt64, err := func() (map[string]int64, error) {","\t\tq := `SELECT id, value FROM counters;`","\t\tr, err := retryQuery(ctx, tx, q)","\t\tif err != nil {","\t\t\treturn nil, fmt.Errorf(\"query %s \\n\\n execute error: %w\", q, err)","\t\t}","","\t\tdefer r.Close()","","\t\tdataInt64 := make(map[string]int64)","\t\tfor r.Next() {","\t\t\tvar id string","\t\t\tvar value int64","","\t\t\terr = r.Scan(\u0026id, \u0026value)","\t\t\tif err != nil {","\t\t\t\treturn nil, fmt.Errorf(\"get all int64 data err: %w\", err)","\t\t\t}","","\t\t\tdataInt64[id] = value","\t\t}","","\t\tif r.Err() != nil {","\t\t\treturn nil, fmt.Errorf(\"get all int64 data iteration err: %w\", err)","\t\t}","","\t\treturn dataInt64, nil","\t}()","","\tif err != nil {","\t\tif err = retryRollback(ctx, tx); err != nil {","\t\t\treturn nil, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn nil, err","\t}","","\treturn dataInt64, nil","}"],"Replacement":null,"LineRange":{"From":337,"To":383},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":337,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `get all int64 data err: %w` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\treturn nil, fmt.Errorf(\"get all int64 data err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":8609,"Line":362,"Column":28},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `get all int64 data iteration err: %w` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\treturn nil, fmt.Errorf(\"get all int64 data iteration err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":8728,"Line":369,"Column":27},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"385-430 lines are duplicate of `internal/storage/database_storage.go:337-383`","Severity":"error","SourceLines":["func (db *DB) getAllDataFloat64(ctx context.Context) (map[string]float64, error) {","\ttx, err := db.pool.Begin(ctx)","\tif err != nil {","\t\treturn nil, fmt.Errorf(\"unable to start transaction err: %w\", err)","\t}","\tdefer func() {","\t\tcommitTransaction(ctx, tx, db.logger)","\t}()","","\tdataFloat64, err := func() (map[string]float64, error) {","\t\tq := `SELECT id, delta FROM gauges;`","\t\tr, err := retryQuery(ctx, tx, q)","\t\tif err != nil {","\t\t\treturn nil, fmt.Errorf(\"query %s \\n\\n execute error: %w\", q, err)","\t\t}","\t\tdefer r.Close()","","\t\tdataFloat64 := make(map[string]float64)","\t\tfor r.Next() {","\t\t\tvar id string","\t\t\tvar value float64","","\t\t\terr = r.Scan(\u0026id, \u0026value)","\t\t\tif err != nil {","\t\t\t\treturn nil, fmt.Errorf(\"get all int64 data err: %w\", err)","\t\t\t}","","\t\t\tdataFloat64[id] = value","\t\t}","","\t\tif r.Err() != nil {","\t\t\treturn nil, fmt.Errorf(\"get all int64 data iteration err: %w\", err)","\t\t}","","\t\treturn dataFloat64, nil","\t}()","","\tif err != nil {","\t\tif err = retryRollback(ctx, tx); err != nil {","\t\t\treturn nil, fmt.Errorf(\"transaction cannot be rolled back err: %w\", err)","\t\t}","\t\treturn nil, err","\t}","","\treturn dataFloat64, nil","}"],"Replacement":null,"LineRange":{"From":385,"To":430},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":385,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"prealloc","Text":"Consider pre-allocating `list`","Severity":"error","SourceLines":["\tvar list []string"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":10147,"Line":433,"Column":2},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `%s %s` has 4 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tlist = append(list, fmt.Sprintf(\"%s %s\", k, fv))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":10370,"Line":442,"Column":35},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unparam","Text":"`retryExec` - `arguments` is unused","Severity":"error","SourceLines":["func retryExec(ctx context.Context, tx pgx.Tx, sql string, arguments ...any) error {"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":10898,"Line":470,"Column":60},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Exec(ctx context.Context, sql string, arguments ...any) (commandTag github.com/jackc/pgx/v5/pgconn.CommandTag, err error)","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":11003,"Line":474,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Rollback(ctx context.Context) error","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":11323,"Line":491,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Commit(ctx context.Context) error","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":11636,"Line":508,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error","Severity":"error","SourceLines":["\t\t\treturn row.Scan(\u0026val)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":11959,"Line":523,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error","Severity":"error","SourceLines":["\t\t\treturn row.Scan(\u0026val)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":12312,"Line":538,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"548-568 lines are duplicate of `internal/storage/database_storage.go:570-590`","Severity":"error","SourceLines":["func retryBatchResultQueryRowFloat64(ctx context.Context, results pgx.BatchResults) (string, float64, error) {","\tvar id string","\tvar val float64","","\tif err := retry.Do(","\t\tfunc() error {","\t\t\terr := results.QueryRow().Scan(\u0026id, \u0026val)","\t\t\tif err != nil {","\t\t\t\tif err != pgx.ErrNoRows {","\t\t\t\t\treturn fmt.Errorf(\"getting results gauge err: %w\", err)","\t\t\t\t}","\t\t\t}","\t\t\treturn err","\t\t},","\t\tretryOptions(ctx)...,","\t); err != nil {","\t\treturn \"\", 0, fmt.Errorf(\"retry batch float64 querry err: %w\", err)","\t}","","\treturn id, val, nil","}"],"Replacement":null,"LineRange":{"From":548,"To":568},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":548,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"errorlint","Text":"comparing with != will fail on wrapped errors. Use errors.Is to check for a specific error","Severity":"error","SourceLines":["\t\t\t\tif err != pgx.ErrNoRows {"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":12710,"Line":556,"Column":8},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `getting results gauge err: %w` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\t\t\t\treturn fmt.Errorf(\"getting results gauge err: %w\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":12756,"Line":557,"Column":24},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":12815,"Line":560,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"570-590 lines are duplicate of `internal/storage/database_storage.go:548-568`","Severity":"error","SourceLines":["func retryBatchResultQueryRowInt64(ctx context.Context, results pgx.BatchResults) (string, int64, error) {","\tvar id string","\tvar val int64","","\tif err := retry.Do(","\t\tfunc() error {","\t\t\terr := results.QueryRow().Scan(\u0026id, \u0026val)","\t\t\tif err != nil {","\t\t\t\tif err != pgx.ErrNoRows {","\t\t\t\t\treturn fmt.Errorf(\"getting results gauge err: %w\", err)","\t\t\t\t}","\t\t\t}","\t\t\treturn err","\t\t},","\t\tretryOptions(ctx)...,","\t); err != nil {","\t\treturn \"\", 0, fmt.Errorf(\"retry batch int64 querry err: %w\", err)","\t}","","\treturn id, val, nil","}"],"Replacement":null,"LineRange":{"From":570,"To":590},"Pos":{"Filename":"internal/storage/database_storage.go","Offset":0,"Line":570,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"errorlint","Text":"comparing with != will fail on wrapped errors. Use errors.Is to check for a specific error","Severity":"error","SourceLines":["\t\t\t\tif err != pgx.ErrNoRows {"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":13210,"Line":578,"Column":8},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":13315,"Line":582,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unparam","Text":"`retryQuery` - `args` is unused","Severity":"error","SourceLines":["func retryQuery(ctx context.Context, tx pgx.Tx, sql string, args ...any) (pgx.Rows, error) {"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":13521,"Line":592,"Column":61},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"wrapcheck","Text":"error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Query(ctx context.Context, sql string, args ...any) (github.com/jackc/pgx/v5.Rows, error)","Severity":"error","SourceLines":["\t\t\treturn err"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage.go","Offset":13670,"Line":599,"Column":11},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `CREATE` has 8 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tWillReturnResult(pgxmock.NewResult(\"CREATE\", 1))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":514,"Line":27,"Column":38},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `fail rollback` has 5 occurrences, make it a constant","Severity":"error","SourceLines":["\tmock.ExpectRollback().WillReturnError(errors.New(\"fail rollback\"))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":1795,"Line":70,"Column":51},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `there were unfulfilled expectations: %s` has 6 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tt.Errorf(\"there were unfulfilled expectations: %s\", err)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":3313,"Line":161,"Column":12},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `keyTwo` has 3 occurrences, make it a constant","Severity":"error","SourceLines":["\tmock.ExpectQuery(sqc).WithArgs(\"keyTwo\").WillReturnError(pgx.ErrNoRows)"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":3832,"Line":183,"Column":33},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `bad querry` has 5 occurrences, make it a constant","Severity":"error","SourceLines":["\tmock.ExpectQuery(sqc).WithArgs(\"keyTwo\").WillReturnError(errors.New(\"bad querry\"))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":3984,"Line":187,"Column":70},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `SELECT delta FROM gauges` has 4 occurrences, make it a constant","Severity":"error","SourceLines":["\tmock.ExpectQuery(\"SELECT delta FROM gauges\").WithArgs(gaugeOne)."],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":6249,"Line":312,"Column":19},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `gaugeTwo` has 3 occurrences, but such constant `gaugeTwo` already exists","Severity":"error","SourceLines":["\t\tWillReturnRows(mock.NewRows([]string{\"id\", \"delta\"}).AddRow(gaugeOne, float64(1.1)).AddRow(\"gaugeTwo\", float64(1.2)))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":8993,"Line":449,"Column":94},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `counterTwo` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tWillReturnRows(mock.NewRows([]string{\"id\", \"value\"}).AddRow(counterOne, int64(1)).AddRow(\"counterTwo\", int64(2)))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":9222,"Line":456,"Column":92},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"goconst","Text":"string `some insert errors` has 2 occurrences, make it a constant","Severity":"error","SourceLines":["\t\tWillReturnError(errors.New(\"some insert errors\"))"],"Replacement":null,"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":11518,"Line":563,"Column":30},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"639-655 lines are duplicate of `internal/storage/database_storage_test.go:756-772`","Severity":"error","SourceLines":["\tfor _, tt := range tests {","\t\ttt := tt","\t\tt.Run(tt.name, func(t *testing.T) {","\t\t\tdb := \u0026DB{","\t\t\t\tpool:   tt.fields.pool,","\t\t\t\tlogger: tt.fields.logger,","\t\t\t}","\t\t\tgot, err := db.AddInt64Value(ctx, tt.args.key, tt.args.value)","\t\t\tif (err != nil) != tt.wantErr {","\t\t\t\tt.Errorf(\"DB.AddInt64Value() error = %v, wantErr %v\", err, tt.wantErr)","\t\t\t\treturn","\t\t\t}","\t\t\tif got != tt.want {","\t\t\t\tt.Errorf(\"DB.AddInt64Value() = %v, want %v\", got, tt.want)","\t\t\t}","\t\t})","\t}"],"Replacement":null,"LineRange":{"From":639,"To":655},"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":0,"Line":639,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"dupl","Text":"756-772 lines are duplicate of `internal/storage/database_storage_test.go:639-655`","Severity":"error","SourceLines":["\tfor _, tt := range tests {","\t\ttt := tt","\t\tt.Run(tt.name, func(t *testing.T) {","\t\t\tdb := \u0026DB{","\t\t\t\tpool:   tt.fields.pool,","\t\t\t\tlogger: tt.fields.logger,","\t\t\t}","\t\t\tgot, err := db.SetFloat64Value(ctx, tt.args.key, tt.args.value)","\t\t\tif (err != nil) != tt.wantErr {","\t\t\t\tt.Errorf(\"DB.SetFloat64Value() error = %v, wantErr %v\", err, tt.wantErr)","\t\t\t\treturn","\t\t\t}","\t\t\tif got != tt.want {","\t\t\t\tt.Errorf(\"DB.SetFloat64Value() = %v, want %v\", got, tt.want)","\t\t\t}","\t\t})","\t}"],"Replacement":null,"LineRange":{"From":756,"To":772},"Pos":{"Filename":"internal/storage/database_storage_test.go","Offset":0,"Line":756,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unparam","Text":"(*MemStorage).getAllDataInt64 - result 1 (error) is always nil","Severity":"error","SourceLines":["func (ms *MemStorage) getAllDataInt64(_ context.Context) (map[string]int64, error) {"],"Replacement":null,"Pos":{"Filename":"internal/storage/memstorage.go","Offset":1422,"Line":74,"Column":77},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"unparam","Text":"(*MemStorage).getAllDataFloat64 - result 1 (error) is always nil","Severity":"error","SourceLines":["func (ms *MemStorage) getAllDataFloat64(_ context.Context) (map[string]float64, error) {"],"Replacement":null,"Pos":{"Filename":"internal/storage/memstorage.go","Offset":1583,"Line":81,"Column":81},"ExpectNoLint":false,"ExpectedNoLintLinter":""}],"Report":{"Linters":[{"Name":"asasalint","Enabled":true},{"Name":"asciicheck","Enabled":true},{"Name":"bidichk"},{"Name":"bodyclose","Enabled":true},{"Name":"containedctx","Enabled":true},{"Name":"contextcheck"},{"Name":"cyclop"},{"Name":"decorder"},{"Name":"deadcode"},{"Name":"depguard"},{"Name":"dogsled"},{"Name":"dupl","Enabled":true},{"Name":"dupword","Enabled":true},{"Name":"durationcheck","Enabled":true},{"Name":"errcheck","Enabled":true,"EnabledByDefault":true},{"Name":"errchkjson"},{"Name":"errname","Enabled":true},{"Name":"errorlint","Enabled":true},{"Name":"execinquery","Enabled":true},{"Name":"exhaustive","Enabled":true},{"Name":"exhaustivestruct"},{"Name":"exhaustruct"},{"Name":"exportloopref"},{"Name":"forbidigo"},{"Name":"forcetypeassert"},{"Name":"funlen"},{"Name":"gci"},{"Name":"ginkgolinter"},{"Name":"gocheckcompilerdirectives","Enabled":true},{"Name":"gochecknoglobals"},{"Name":"gochecknoinits"},{"Name":"gocognit"},{"Name":"goconst","Enabled":true},{"Name":"gocritic","Enabled":true},{"Name":"gocyclo"},{"Name":"godot","Enabled":true},{"Name":"godox"},{"Name":"goerr113"},{"Name":"gofmt","Enabled":true},{"Name":"gofumpt"},{"Name":"goheader"},{"Name":"goimports","Enabled":true},{"Name":"golint"},{"Name":"gomnd","Enabled":true},{"Name":"gomoddirectives"},{"Name":"gomodguard"},{"Name":"goprintffuncname","Enabled":true},{"Name":"gosec","Enabled":true},{"Name":"gosimple","Enabled":true,"EnabledByDefault":true},{"Name":"gosmopolitan"},{"Name":"govet","Enabled":true,"EnabledByDefault":true},{"Name":"grouper","Enabled":true},{"Name":"ifshort"},{"Name":"importas"},{"Name":"ineffassign","Enabled":true,"EnabledByDefault":true},{"Name":"interfacebloat"},{"Name":"interfacer"},{"Name":"ireturn"},{"Name":"lll","Enabled":true},{"Name":"loggercheck"},{"Name":"maintidx"},{"Name":"makezero","Enabled":true},{"Name":"maligned"},{"Name":"mirror"},{"Name":"misspell"},{"Name":"musttag"},{"Name":"nakedret"},{"Name":"nestif"},{"Name":"nilerr","Enabled":true},{"Name":"nilnil","Enabled":true},{"Name":"nlreturn"},{"Name":"noctx"},{"Name":"nonamedreturns"},{"Name":"nosnakecase"},{"Name":"nosprintfhostport","Enabled":true},{"Name":"paralleltest"},{"Name":"prealloc","Enabled":true},{"Name":"predeclared","Enabled":true},{"Name":"promlinter"},{"Name":"reassign","Enabled":true},{"Name":"revive","Enabled":true},{"Name":"rowserrcheck","Enabled":true},{"Name":"scopelint"},{"Name":"sqlclosecheck","Enabled":true},{"Name":"staticcheck","Enabled":true,"EnabledByDefault":true},{"Name":"structcheck"},{"Name":"stylecheck","Enabled":true},{"Name":"tagalign"},{"Name":"tagliatelle"},{"Name":"tenv","Enabled":true},{"Name":"testableexamples","Enabled":true},{"Name":"testpackage"},{"Name":"thelper","Enabled":true},{"Name":"tparallel","Enabled":true},{"Name":"typecheck","Enabled":true,"EnabledByDefault":true},{"Name":"unconvert","Enabled":true},{"Name":"unparam","Enabled":true},{"Name":"unused","Enabled":true,"EnabledByDefault":true},{"Name":"usestdlibvars","Enabled":true},{"Name":"varcheck"},{"Name":"varnamelen"},{"Name":"wastedassign","Enabled":true},{"Name":"whitespace","Enabled":true},{"Name":"wrapcheck","Enabled":true},{"Name":"wsl"},{"Name":"nolintlint","Enabled":true},{"Name":"zerologlint"}]}}
