// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/v1/metcoll.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Metcoll_Updates_FullMethodName = "/metcoll.Metcoll/Updates"
	Metcoll_Update_FullMethodName  = "/metcoll.Metcoll/Update"
)

// MetcollClient is the client API for Metcoll service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetcollClient interface {
	Updates(ctx context.Context, in *BatchUpdateRequest, opts ...grpc.CallOption) (*BatchUpdateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type metcollClient struct {
	cc grpc.ClientConnInterface
}

func NewMetcollClient(cc grpc.ClientConnInterface) MetcollClient {
	return &metcollClient{cc}
}

func (c *metcollClient) Updates(ctx context.Context, in *BatchUpdateRequest, opts ...grpc.CallOption) (*BatchUpdateResponse, error) {
	out := new(BatchUpdateResponse)
	err := c.cc.Invoke(ctx, Metcoll_Updates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metcollClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Metcoll_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetcollServer is the server API for Metcoll service.
// All implementations must embed UnimplementedMetcollServer
// for forward compatibility
type MetcollServer interface {
	Updates(context.Context, *BatchUpdateRequest) (*BatchUpdateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedMetcollServer()
}

// UnimplementedMetcollServer must be embedded to have forward compatible implementations.
type UnimplementedMetcollServer struct {
}

func (UnimplementedMetcollServer) Updates(context.Context, *BatchUpdateRequest) (*BatchUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedMetcollServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetcollServer) mustEmbedUnimplementedMetcollServer() {}

// UnsafeMetcollServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetcollServer will
// result in compilation errors.
type UnsafeMetcollServer interface {
	mustEmbedUnimplementedMetcollServer()
}

func RegisterMetcollServer(s grpc.ServiceRegistrar, srv MetcollServer) {
	s.RegisterService(&Metcoll_ServiceDesc, srv)
}

func _Metcoll_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetcollServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metcoll_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetcollServer).Updates(ctx, req.(*BatchUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metcoll_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetcollServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metcoll_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetcollServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metcoll_ServiceDesc is the grpc.ServiceDesc for Metcoll service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metcoll_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metcoll.Metcoll",
	HandlerType: (*MetcollServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Updates",
			Handler:    _Metcoll_Updates_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Metcoll_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/metcoll.proto",
}
