// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metcoll/metcoll_grpc.pb.go

// Package metcoll is a generated GoMock package.
package metcoll

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMetcollClient is a mock of MetcollClient interface.
type MockMetcollClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetcollClientMockRecorder
}

// MockMetcollClientMockRecorder is the mock recorder for MockMetcollClient.
type MockMetcollClientMockRecorder struct {
	mock *MockMetcollClient
}

// NewMockMetcollClient creates a new mock instance.
func NewMockMetcollClient(ctrl *gomock.Controller) *MockMetcollClient {
	mock := &MockMetcollClient{ctrl: ctrl}
	mock.recorder = &MockMetcollClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetcollClient) EXPECT() *MockMetcollClientMockRecorder {
	return m.recorder
}

// MetricList mocks base method.
func (m *MockMetcollClient) MetricList(ctx context.Context, in *MetricListRequest, opts ...grpc.CallOption) (*MetricListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MetricList", varargs...)
	ret0, _ := ret[0].(*MetricListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricList indicates an expected call of MetricList.
func (mr *MockMetcollClientMockRecorder) MetricList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricList", reflect.TypeOf((*MockMetcollClient)(nil).MetricList), varargs...)
}

// ReadMetric mocks base method.
func (m *MockMetcollClient) ReadMetric(ctx context.Context, in *ReadMetricRequest, opts ...grpc.CallOption) (*ReadMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMetric", varargs...)
	ret0, _ := ret[0].(*ReadMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMetric indicates an expected call of ReadMetric.
func (mr *MockMetcollClientMockRecorder) ReadMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetric", reflect.TypeOf((*MockMetcollClient)(nil).ReadMetric), varargs...)
}

// Update mocks base method.
func (m *MockMetcollClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetcollClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetcollClient)(nil).Update), varargs...)
}

// Updates mocks base method.
func (m *MockMetcollClient) Updates(ctx context.Context, in *BatchUpdateRequest, opts ...grpc.CallOption) (*BatchUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Updates", varargs...)
	ret0, _ := ret[0].(*BatchUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockMetcollClientMockRecorder) Updates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockMetcollClient)(nil).Updates), varargs...)
}

// MockMetcollServer is a mock of MetcollServer interface.
type MockMetcollServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetcollServerMockRecorder
}

// MockMetcollServerMockRecorder is the mock recorder for MockMetcollServer.
type MockMetcollServerMockRecorder struct {
	mock *MockMetcollServer
}

// NewMockMetcollServer creates a new mock instance.
func NewMockMetcollServer(ctrl *gomock.Controller) *MockMetcollServer {
	mock := &MockMetcollServer{ctrl: ctrl}
	mock.recorder = &MockMetcollServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetcollServer) EXPECT() *MockMetcollServerMockRecorder {
	return m.recorder
}

// MetricList mocks base method.
func (m *MockMetcollServer) MetricList(arg0 context.Context, arg1 *MetricListRequest) (*MetricListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricList", arg0, arg1)
	ret0, _ := ret[0].(*MetricListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricList indicates an expected call of MetricList.
func (mr *MockMetcollServerMockRecorder) MetricList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricList", reflect.TypeOf((*MockMetcollServer)(nil).MetricList), arg0, arg1)
}

// ReadMetric mocks base method.
func (m *MockMetcollServer) ReadMetric(arg0 context.Context, arg1 *ReadMetricRequest) (*ReadMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMetric", arg0, arg1)
	ret0, _ := ret[0].(*ReadMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMetric indicates an expected call of ReadMetric.
func (mr *MockMetcollServerMockRecorder) ReadMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetric", reflect.TypeOf((*MockMetcollServer)(nil).ReadMetric), arg0, arg1)
}

// Update mocks base method.
func (m *MockMetcollServer) Update(arg0 context.Context, arg1 *UpdateRequest) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetcollServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetcollServer)(nil).Update), arg0, arg1)
}

// Updates mocks base method.
func (m *MockMetcollServer) Updates(arg0 context.Context, arg1 *BatchUpdateRequest) (*BatchUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0, arg1)
	ret0, _ := ret[0].(*BatchUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockMetcollServerMockRecorder) Updates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockMetcollServer)(nil).Updates), arg0, arg1)
}

// mustEmbedUnimplementedMetcollServer mocks base method.
func (m *MockMetcollServer) mustEmbedUnimplementedMetcollServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetcollServer")
}

// mustEmbedUnimplementedMetcollServer indicates an expected call of mustEmbedUnimplementedMetcollServer.
func (mr *MockMetcollServerMockRecorder) mustEmbedUnimplementedMetcollServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetcollServer", reflect.TypeOf((*MockMetcollServer)(nil).mustEmbedUnimplementedMetcollServer))
}

// MockUnsafeMetcollServer is a mock of UnsafeMetcollServer interface.
type MockUnsafeMetcollServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetcollServerMockRecorder
}

// MockUnsafeMetcollServerMockRecorder is the mock recorder for MockUnsafeMetcollServer.
type MockUnsafeMetcollServerMockRecorder struct {
	mock *MockUnsafeMetcollServer
}

// NewMockUnsafeMetcollServer creates a new mock instance.
func NewMockUnsafeMetcollServer(ctrl *gomock.Controller) *MockUnsafeMetcollServer {
	mock := &MockUnsafeMetcollServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetcollServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetcollServer) EXPECT() *MockUnsafeMetcollServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetcollServer mocks base method.
func (m *MockUnsafeMetcollServer) mustEmbedUnimplementedMetcollServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetcollServer")
}

// mustEmbedUnimplementedMetcollServer indicates an expected call of mustEmbedUnimplementedMetcollServer.
func (mr *MockUnsafeMetcollServerMockRecorder) mustEmbedUnimplementedMetcollServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetcollServer", reflect.TypeOf((*MockUnsafeMetcollServer)(nil).mustEmbedUnimplementedMetcollServer))
}
