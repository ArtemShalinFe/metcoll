// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handlers.go

// Package handlers is a generated GoMock package.
package metcoll

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddInt64Value mocks base method.
func (m *MockStorage) AddInt64Value(ctx context.Context, key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInt64Value", ctx, key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInt64Value indicates an expected call of AddInt64Value.
func (mr *MockStorageMockRecorder) AddInt64Value(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt64Value", reflect.TypeOf((*MockStorage)(nil).AddInt64Value), ctx, key, value)
}

// BatchAddInt64Value mocks base method.
func (m *MockStorage) BatchAddInt64Value(ctx context.Context, counters map[string]int64) (map[string]int64, []error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddInt64Value", ctx, counters)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].([]error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchAddInt64Value indicates an expected call of BatchAddInt64Value.
func (mr *MockStorageMockRecorder) BatchAddInt64Value(ctx, counters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddInt64Value", reflect.TypeOf((*MockStorage)(nil).BatchAddInt64Value), ctx, counters)
}

// BatchSetFloat64Value mocks base method.
func (m *MockStorage) BatchSetFloat64Value(ctx context.Context, gauges map[string]float64) (map[string]float64, []error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSetFloat64Value", ctx, gauges)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].([]error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchSetFloat64Value indicates an expected call of BatchSetFloat64Value.
func (mr *MockStorageMockRecorder) BatchSetFloat64Value(ctx, gauges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSetFloat64Value", reflect.TypeOf((*MockStorage)(nil).BatchSetFloat64Value), ctx, gauges)
}

// GetDataList mocks base method.
func (m *MockStorage) GetDataList(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataList", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataList indicates an expected call of GetDataList.
func (mr *MockStorageMockRecorder) GetDataList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataList", reflect.TypeOf((*MockStorage)(nil).GetDataList), ctx)
}

// GetFloat64Value mocks base method.
func (m *MockStorage) GetFloat64Value(ctx context.Context, key string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64Value", ctx, key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloat64Value indicates an expected call of GetFloat64Value.
func (mr *MockStorageMockRecorder) GetFloat64Value(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64Value", reflect.TypeOf((*MockStorage)(nil).GetFloat64Value), ctx, key)
}

// GetInt64Value mocks base method.
func (m *MockStorage) GetInt64Value(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64Value", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt64Value indicates an expected call of GetInt64Value.
func (mr *MockStorageMockRecorder) GetInt64Value(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64Value", reflect.TypeOf((*MockStorage)(nil).GetInt64Value), ctx, key)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// SetFloat64Value mocks base method.
func (m *MockStorage) SetFloat64Value(ctx context.Context, key string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFloat64Value", ctx, key, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFloat64Value indicates an expected call of SetFloat64Value.
func (mr *MockStorageMockRecorder) SetFloat64Value(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFloat64Value", reflect.TypeOf((*MockStorage)(nil).SetFloat64Value), ctx, key, value)
}
